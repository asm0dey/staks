[{"name":"abstract class CompoundHandler<T> : Handler<T> ","description":"staks.CompoundHandler","location":"staks/staks/-compound-handler/index.html","searchKeys":["CompoundHandler","abstract class CompoundHandler<T> : Handler<T> ","staks.CompoundHandler"]},{"name":"abstract fun matches(event: XMLEvent): Boolean","description":"staks.Handler.matches","location":"staks/staks/-handler/matches.html","searchKeys":["matches","abstract fun matches(event: XMLEvent): Boolean","staks.Handler.matches"]},{"name":"abstract fun process(ev: XMLEvent)","description":"staks.Handler.process","location":"staks/staks/-handler/process.html","searchKeys":["process","abstract fun process(ev: XMLEvent)","staks.Handler.process"]},{"name":"abstract fun reset()","description":"staks.Handler.reset","location":"staks/staks/-handler/reset.html","searchKeys":["reset","abstract fun reset()","staks.Handler.reset"]},{"name":"abstract override val child: Handler<SOURCE>","description":"staks.DecoratingHandler.child","location":"staks/staks/-decorating-handler/child.html","searchKeys":["child","abstract override val child: Handler<SOURCE>","staks.DecoratingHandler.child"]},{"name":"abstract val child: Handler<T>","description":"staks.ContainerHandler.child","location":"staks/staks/-container-handler/child.html","searchKeys":["child","abstract val child: Handler<T>","staks.ContainerHandler.child"]},{"name":"abstract val isSingular: Boolean","description":"staks.Handler.isSingular","location":"staks/staks/-handler/is-singular.html","searchKeys":["isSingular","abstract val isSingular: Boolean","staks.Handler.isSingular"]},{"name":"abstract val reader: XMLEventReader","description":"staks.CompoundHandler.reader","location":"staks/staks/-compound-handler/reader.html","searchKeys":["reader","abstract val reader: XMLEventReader","staks.CompoundHandler.reader"]},{"name":"abstract val value: () -> T","description":"staks.Handler.value","location":"staks/staks/-handler/value.html","searchKeys":["value","abstract val value: () -> T","staks.Handler.value"]},{"name":"class AttrHandler(tagName: String, attributeName: String) : Handler<String> ","description":"staks.AttrHandler","location":"staks/staks/-attr-handler/index.html","searchKeys":["AttrHandler","class AttrHandler(tagName: String, attributeName: String) : Handler<String> ","staks.AttrHandler"]},{"name":"class IntHandler(val child: Handler<String>) : DecoratingHandler<Int, String> ","description":"staks.IntHandler","location":"staks/staks/-int-handler/index.html","searchKeys":["IntHandler","class IntHandler(val child: Handler<String>) : DecoratingHandler<Int, String> ","staks.IntHandler"]},{"name":"class ListHandler<T>(tagName: String, func: CompoundHandler<*>.() -> () -> T, val reader: XMLEventReader) : CompoundHandler<List<T>> ","description":"staks.ListHandler","location":"staks/staks/-list-handler/index.html","searchKeys":["ListHandler","class ListHandler<T>(tagName: String, func: CompoundHandler<*>.() -> () -> T, val reader: XMLEventReader) : CompoundHandler<List<T>> ","staks.ListHandler"]},{"name":"class OptionalHandler<Z : Any>(val child: Handler<Z>) : DecoratingHandler<Z?, Z> ","description":"staks.OptionalHandler","location":"staks/staks/-optional-handler/index.html","searchKeys":["OptionalHandler","class OptionalHandler<Z : Any>(val child: Handler<Z>) : DecoratingHandler<Z?, Z> ","staks.OptionalHandler"]},{"name":"class SingleHandler<T : Any>(tagName: String, val reader: XMLEventReader, func: CompoundHandler<*>.() -> () -> T) : CompoundHandler<T> ","description":"staks.SingleHandler","location":"staks/staks/-single-handler/index.html","searchKeys":["SingleHandler","class SingleHandler<T : Any>(tagName: String, val reader: XMLEventReader, func: CompoundHandler<*>.() -> () -> T) : CompoundHandler<T> ","staks.SingleHandler"]},{"name":"class StaxBuilder<T>(val reader: XMLEventReader, func: StaxBuilder<T>.() -> () -> T) : CompoundHandler<T> ","description":"staks.StaxBuilder","location":"staks/staks/-stax-builder/index.html","searchKeys":["StaxBuilder","class StaxBuilder<T>(val reader: XMLEventReader, func: StaxBuilder<T>.() -> () -> T) : CompoundHandler<T> ","staks.StaxBuilder"]},{"name":"class TagTextHandler(tagName: String, reader: XMLEventReader) : Handler<String> ","description":"staks.TagTextHandler","location":"staks/staks/-tag-text-handler/index.html","searchKeys":["TagTextHandler","class TagTextHandler(tagName: String, reader: XMLEventReader) : Handler<String> ","staks.TagTextHandler"]},{"name":"class UnnamedListHandler<T>(val child: Handler<T>) : ContainerHandler<T, List<T>> ","description":"staks.UnnamedListHandler","location":"staks/staks/-unnamed-list-handler/index.html","searchKeys":["UnnamedListHandler","class UnnamedListHandler<T>(val child: Handler<T>) : ContainerHandler<T, List<T>> ","staks.UnnamedListHandler"]},{"name":"constructor()","description":"staks.CompoundHandler.CompoundHandler","location":"staks/staks/-compound-handler/-compound-handler.html","searchKeys":["CompoundHandler","constructor()","staks.CompoundHandler.CompoundHandler"]},{"name":"constructor(child: Handler<String>)","description":"staks.IntHandler.IntHandler","location":"staks/staks/-int-handler/-int-handler.html","searchKeys":["IntHandler","constructor(child: Handler<String>)","staks.IntHandler.IntHandler"]},{"name":"constructor(child: Handler<T>)","description":"staks.UnnamedListHandler.UnnamedListHandler","location":"staks/staks/-unnamed-list-handler/-unnamed-list-handler.html","searchKeys":["UnnamedListHandler","constructor(child: Handler<T>)","staks.UnnamedListHandler.UnnamedListHandler"]},{"name":"constructor(child: Handler<Z>)","description":"staks.OptionalHandler.OptionalHandler","location":"staks/staks/-optional-handler/-optional-handler.html","searchKeys":["OptionalHandler","constructor(child: Handler<Z>)","staks.OptionalHandler.OptionalHandler"]},{"name":"constructor(reader: XMLEventReader, func: StaxBuilder<T>.() -> () -> T)","description":"staks.StaxBuilder.StaxBuilder","location":"staks/staks/-stax-builder/-stax-builder.html","searchKeys":["StaxBuilder","constructor(reader: XMLEventReader, func: StaxBuilder<T>.() -> () -> T)","staks.StaxBuilder.StaxBuilder"]},{"name":"constructor(tagName: String, attributeName: String)","description":"staks.AttrHandler.AttrHandler","location":"staks/staks/-attr-handler/-attr-handler.html","searchKeys":["AttrHandler","constructor(tagName: String, attributeName: String)","staks.AttrHandler.AttrHandler"]},{"name":"constructor(tagName: String, func: CompoundHandler<*>.() -> () -> T, reader: XMLEventReader)","description":"staks.ListHandler.ListHandler","location":"staks/staks/-list-handler/-list-handler.html","searchKeys":["ListHandler","constructor(tagName: String, func: CompoundHandler<*>.() -> () -> T, reader: XMLEventReader)","staks.ListHandler.ListHandler"]},{"name":"constructor(tagName: String, reader: XMLEventReader)","description":"staks.TagTextHandler.TagTextHandler","location":"staks/staks/-tag-text-handler/-tag-text-handler.html","searchKeys":["TagTextHandler","constructor(tagName: String, reader: XMLEventReader)","staks.TagTextHandler.TagTextHandler"]},{"name":"constructor(tagName: String, reader: XMLEventReader, func: CompoundHandler<*>.() -> () -> T)","description":"staks.SingleHandler.SingleHandler","location":"staks/staks/-single-handler/-single-handler.html","searchKeys":["SingleHandler","constructor(tagName: String, reader: XMLEventReader, func: CompoundHandler<*>.() -> () -> T)","staks.SingleHandler.SingleHandler"]},{"name":"fun <DECORATOR : ContainerHandler<*, *>> decorate(child: DECORATOR): DECORATOR","description":"staks.CompoundHandler.decorate","location":"staks/staks/-compound-handler/decorate.html","searchKeys":["decorate","fun <DECORATOR : ContainerHandler<*, *>> decorate(child: DECORATOR): DECORATOR","staks.CompoundHandler.decorate"]},{"name":"fun <R : Handler<*>> registerChild(child: R): R","description":"staks.CompoundHandler.registerChild","location":"staks/staks/-compound-handler/register-child.html","searchKeys":["registerChild","fun <R : Handler<*>> registerChild(child: R): R","staks.CompoundHandler.registerChild"]},{"name":"fun <T : Any> CompoundHandler<*>.single(tagName: String, func: CompoundHandler<*>.() -> () -> T): SingleHandler<T>","description":"staks.single","location":"staks/staks/single.html","searchKeys":["single","fun <T : Any> CompoundHandler<*>.single(tagName: String, func: CompoundHandler<*>.() -> () -> T): SingleHandler<T>","staks.single"]},{"name":"fun <T> CompoundHandler<*>.list(handler: Handler<T>): Handler<List<T>>","description":"staks.list","location":"staks/staks/list.html","searchKeys":["list","fun <T> CompoundHandler<*>.list(handler: Handler<T>): Handler<List<T>>","staks.list"]},{"name":"fun <T> CompoundHandler<*>.list(tagName: String, func: CompoundHandler<*>.() -> () -> T): ListHandler<T>","description":"staks.list","location":"staks/staks/list.html","searchKeys":["list","fun <T> CompoundHandler<*>.list(tagName: String, func: CompoundHandler<*>.() -> () -> T): ListHandler<T>","staks.list"]},{"name":"fun <T> staks(file: File, func: StaxBuilder<T>.() -> () -> T): T","description":"staks.staks","location":"staks/staks/staks.html","searchKeys":["staks","fun <T> staks(file: File, func: StaxBuilder<T>.() -> () -> T): T","staks.staks"]},{"name":"fun <T> staks(input: InputStream, encoding: String, func: StaxBuilder<T>.() -> () -> T): T","description":"staks.staks","location":"staks/staks/staks.html","searchKeys":["staks","fun <T> staks(input: InputStream, encoding: String, func: StaxBuilder<T>.() -> () -> T): T","staks.staks"]},{"name":"fun <T> staks(input: InputStream, func: StaxBuilder<T>.() -> () -> T): T","description":"staks.staks","location":"staks/staks/staks.html","searchKeys":["staks","fun <T> staks(input: InputStream, func: StaxBuilder<T>.() -> () -> T): T","staks.staks"]},{"name":"fun <T> staks(reader: XMLStreamReader, func: StaxBuilder<T>.() -> () -> T): T","description":"staks.staks","location":"staks/staks/staks.html","searchKeys":["staks","fun <T> staks(reader: XMLStreamReader, func: StaxBuilder<T>.() -> () -> T): T","staks.staks"]},{"name":"fun <T> staks(source: Source, func: StaxBuilder<T>.() -> () -> T): T","description":"staks.staks","location":"staks/staks/staks.html","searchKeys":["staks","fun <T> staks(source: Source, func: StaxBuilder<T>.() -> () -> T): T","staks.staks"]},{"name":"fun <T> staks(src: URL, func: StaxBuilder<T>.() -> () -> T): T","description":"staks.staks","location":"staks/staks/staks.html","searchKeys":["staks","fun <T> staks(src: URL, func: StaxBuilder<T>.() -> () -> T): T","staks.staks"]},{"name":"fun <Z : Any> Handler<Z>.optional(): OptionalHandler<Z>","description":"staks.CompoundHandler.optional","location":"staks/staks/-compound-handler/optional.html","searchKeys":["optional","fun <Z : Any> Handler<Z>.optional(): OptionalHandler<Z>","staks.CompoundHandler.optional"]},{"name":"fun CompoundHandler<*>.attribute(tagName: String, attributeName: String): AttrHandler","description":"staks.attribute","location":"staks/staks/attribute.html","searchKeys":["attribute","fun CompoundHandler<*>.attribute(tagName: String, attributeName: String): AttrHandler","staks.attribute"]},{"name":"fun CompoundHandler<*>.tagText(tagName: String): TagTextHandler","description":"staks.tagText","location":"staks/staks/tag-text.html","searchKeys":["tagText","fun CompoundHandler<*>.tagText(tagName: String): TagTextHandler","staks.tagText"]},{"name":"fun Handler<String>.int(): IntHandler","description":"staks.CompoundHandler.int","location":"staks/staks/-compound-handler/int.html","searchKeys":["int","fun Handler<String>.int(): IntHandler","staks.CompoundHandler.int"]},{"name":"fun reader(file: File): XMLEventReader2","description":"staks.reader","location":"staks/staks/reader.html","searchKeys":["reader","fun reader(file: File): XMLEventReader2","staks.reader"]},{"name":"fun reader(inputStream: InputStream): XMLEventReader","description":"staks.reader","location":"staks/staks/reader.html","searchKeys":["reader","fun reader(inputStream: InputStream): XMLEventReader","staks.reader"]},{"name":"fun reader(inputStream: InputStream, encoding: String): XMLEventReader","description":"staks.reader","location":"staks/staks/reader.html","searchKeys":["reader","fun reader(inputStream: InputStream, encoding: String): XMLEventReader","staks.reader"]},{"name":"fun reader(reader: XMLStreamReader): XMLEventReader","description":"staks.reader","location":"staks/staks/reader.html","searchKeys":["reader","fun reader(reader: XMLStreamReader): XMLEventReader","staks.reader"]},{"name":"fun reader(source: Source): XMLEventReader","description":"staks.reader","location":"staks/staks/reader.html","searchKeys":["reader","fun reader(source: Source): XMLEventReader","staks.reader"]},{"name":"fun reader(source: URL): XMLEventReader2","description":"staks.reader","location":"staks/staks/reader.html","searchKeys":["reader","fun reader(source: URL): XMLEventReader2","staks.reader"]},{"name":"interface ContainerHandler<T, R> : Handler<R> ","description":"staks.ContainerHandler","location":"staks/staks/-container-handler/index.html","searchKeys":["ContainerHandler","interface ContainerHandler<T, R> : Handler<R> ","staks.ContainerHandler"]},{"name":"interface DecoratingHandler<RESULT, SOURCE> : Handler<RESULT> , ContainerHandler<SOURCE, RESULT> ","description":"staks.DecoratingHandler","location":"staks/staks/-decorating-handler/index.html","searchKeys":["DecoratingHandler","interface DecoratingHandler<RESULT, SOURCE> : Handler<RESULT> , ContainerHandler<SOURCE, RESULT> ","staks.DecoratingHandler"]},{"name":"interface Handler<T>","description":"staks.Handler","location":"staks/staks/-handler/index.html","searchKeys":["Handler","interface Handler<T>","staks.Handler"]},{"name":"open operator fun invoke(): T","description":"staks.Handler.invoke","location":"staks/staks/-handler/invoke.html","searchKeys":["invoke","open operator fun invoke(): T","staks.Handler.invoke"]},{"name":"open override fun matches(event: XMLEvent): Boolean","description":"staks.AttrHandler.matches","location":"staks/staks/-attr-handler/matches.html","searchKeys":["matches","open override fun matches(event: XMLEvent): Boolean","staks.AttrHandler.matches"]},{"name":"open override fun matches(event: XMLEvent): Boolean","description":"staks.DecoratingHandler.matches","location":"staks/staks/-decorating-handler/matches.html","searchKeys":["matches","open override fun matches(event: XMLEvent): Boolean","staks.DecoratingHandler.matches"]},{"name":"open override fun matches(event: XMLEvent): Boolean","description":"staks.ListHandler.matches","location":"staks/staks/-list-handler/matches.html","searchKeys":["matches","open override fun matches(event: XMLEvent): Boolean","staks.ListHandler.matches"]},{"name":"open override fun matches(event: XMLEvent): Boolean","description":"staks.SingleHandler.matches","location":"staks/staks/-single-handler/matches.html","searchKeys":["matches","open override fun matches(event: XMLEvent): Boolean","staks.SingleHandler.matches"]},{"name":"open override fun matches(event: XMLEvent): Boolean","description":"staks.StaxBuilder.matches","location":"staks/staks/-stax-builder/matches.html","searchKeys":["matches","open override fun matches(event: XMLEvent): Boolean","staks.StaxBuilder.matches"]},{"name":"open override fun matches(event: XMLEvent): Boolean","description":"staks.TagTextHandler.matches","location":"staks/staks/-tag-text-handler/matches.html","searchKeys":["matches","open override fun matches(event: XMLEvent): Boolean","staks.TagTextHandler.matches"]},{"name":"open override fun matches(event: XMLEvent): Boolean","description":"staks.UnnamedListHandler.matches","location":"staks/staks/-unnamed-list-handler/matches.html","searchKeys":["matches","open override fun matches(event: XMLEvent): Boolean","staks.UnnamedListHandler.matches"]},{"name":"open override fun process(ev: XMLEvent)","description":"staks.AttrHandler.process","location":"staks/staks/-attr-handler/process.html","searchKeys":["process","open override fun process(ev: XMLEvent)","staks.AttrHandler.process"]},{"name":"open override fun process(ev: XMLEvent)","description":"staks.IntHandler.process","location":"staks/staks/-int-handler/process.html","searchKeys":["process","open override fun process(ev: XMLEvent)","staks.IntHandler.process"]},{"name":"open override fun process(ev: XMLEvent)","description":"staks.ListHandler.process","location":"staks/staks/-list-handler/process.html","searchKeys":["process","open override fun process(ev: XMLEvent)","staks.ListHandler.process"]},{"name":"open override fun process(ev: XMLEvent)","description":"staks.OptionalHandler.process","location":"staks/staks/-optional-handler/process.html","searchKeys":["process","open override fun process(ev: XMLEvent)","staks.OptionalHandler.process"]},{"name":"open override fun process(ev: XMLEvent)","description":"staks.SingleHandler.process","location":"staks/staks/-single-handler/process.html","searchKeys":["process","open override fun process(ev: XMLEvent)","staks.SingleHandler.process"]},{"name":"open override fun process(ev: XMLEvent)","description":"staks.StaxBuilder.process","location":"staks/staks/-stax-builder/process.html","searchKeys":["process","open override fun process(ev: XMLEvent)","staks.StaxBuilder.process"]},{"name":"open override fun process(ev: XMLEvent)","description":"staks.TagTextHandler.process","location":"staks/staks/-tag-text-handler/process.html","searchKeys":["process","open override fun process(ev: XMLEvent)","staks.TagTextHandler.process"]},{"name":"open override fun process(ev: XMLEvent)","description":"staks.UnnamedListHandler.process","location":"staks/staks/-unnamed-list-handler/process.html","searchKeys":["process","open override fun process(ev: XMLEvent)","staks.UnnamedListHandler.process"]},{"name":"open override fun reset()","description":"staks.AttrHandler.reset","location":"staks/staks/-attr-handler/reset.html","searchKeys":["reset","open override fun reset()","staks.AttrHandler.reset"]},{"name":"open override fun reset()","description":"staks.IntHandler.reset","location":"staks/staks/-int-handler/reset.html","searchKeys":["reset","open override fun reset()","staks.IntHandler.reset"]},{"name":"open override fun reset()","description":"staks.ListHandler.reset","location":"staks/staks/-list-handler/reset.html","searchKeys":["reset","open override fun reset()","staks.ListHandler.reset"]},{"name":"open override fun reset()","description":"staks.OptionalHandler.reset","location":"staks/staks/-optional-handler/reset.html","searchKeys":["reset","open override fun reset()","staks.OptionalHandler.reset"]},{"name":"open override fun reset()","description":"staks.SingleHandler.reset","location":"staks/staks/-single-handler/reset.html","searchKeys":["reset","open override fun reset()","staks.SingleHandler.reset"]},{"name":"open override fun reset()","description":"staks.StaxBuilder.reset","location":"staks/staks/-stax-builder/reset.html","searchKeys":["reset","open override fun reset()","staks.StaxBuilder.reset"]},{"name":"open override fun reset()","description":"staks.TagTextHandler.reset","location":"staks/staks/-tag-text-handler/reset.html","searchKeys":["reset","open override fun reset()","staks.TagTextHandler.reset"]},{"name":"open override fun reset()","description":"staks.UnnamedListHandler.reset","location":"staks/staks/-unnamed-list-handler/reset.html","searchKeys":["reset","open override fun reset()","staks.UnnamedListHandler.reset"]},{"name":"open override val child: Handler<String>","description":"staks.IntHandler.child","location":"staks/staks/-int-handler/child.html","searchKeys":["child","open override val child: Handler<String>","staks.IntHandler.child"]},{"name":"open override val child: Handler<T>","description":"staks.UnnamedListHandler.child","location":"staks/staks/-unnamed-list-handler/child.html","searchKeys":["child","open override val child: Handler<T>","staks.UnnamedListHandler.child"]},{"name":"open override val child: Handler<Z>","description":"staks.OptionalHandler.child","location":"staks/staks/-optional-handler/child.html","searchKeys":["child","open override val child: Handler<Z>","staks.OptionalHandler.child"]},{"name":"open override val isSingular: Boolean","description":"staks.DecoratingHandler.isSingular","location":"staks/staks/-decorating-handler/is-singular.html","searchKeys":["isSingular","open override val isSingular: Boolean","staks.DecoratingHandler.isSingular"]},{"name":"open override val isSingular: Boolean","description":"staks.StaxBuilder.isSingular","location":"staks/staks/-stax-builder/is-singular.html","searchKeys":["isSingular","open override val isSingular: Boolean","staks.StaxBuilder.isSingular"]},{"name":"open override val isSingular: Boolean = false","description":"staks.ListHandler.isSingular","location":"staks/staks/-list-handler/is-singular.html","searchKeys":["isSingular","open override val isSingular: Boolean = false","staks.ListHandler.isSingular"]},{"name":"open override val isSingular: Boolean = false","description":"staks.UnnamedListHandler.isSingular","location":"staks/staks/-unnamed-list-handler/is-singular.html","searchKeys":["isSingular","open override val isSingular: Boolean = false","staks.UnnamedListHandler.isSingular"]},{"name":"open override val isSingular: Boolean = true","description":"staks.AttrHandler.isSingular","location":"staks/staks/-attr-handler/is-singular.html","searchKeys":["isSingular","open override val isSingular: Boolean = true","staks.AttrHandler.isSingular"]},{"name":"open override val isSingular: Boolean = true","description":"staks.SingleHandler.isSingular","location":"staks/staks/-single-handler/is-singular.html","searchKeys":["isSingular","open override val isSingular: Boolean = true","staks.SingleHandler.isSingular"]},{"name":"open override val isSingular: Boolean = true","description":"staks.TagTextHandler.isSingular","location":"staks/staks/-tag-text-handler/is-singular.html","searchKeys":["isSingular","open override val isSingular: Boolean = true","staks.TagTextHandler.isSingular"]},{"name":"open override val reader: XMLEventReader","description":"staks.ListHandler.reader","location":"staks/staks/-list-handler/reader.html","searchKeys":["reader","open override val reader: XMLEventReader","staks.ListHandler.reader"]},{"name":"open override val reader: XMLEventReader","description":"staks.SingleHandler.reader","location":"staks/staks/-single-handler/reader.html","searchKeys":["reader","open override val reader: XMLEventReader","staks.SingleHandler.reader"]},{"name":"open override val reader: XMLEventReader","description":"staks.StaxBuilder.reader","location":"staks/staks/-stax-builder/reader.html","searchKeys":["reader","open override val reader: XMLEventReader","staks.StaxBuilder.reader"]},{"name":"open override val value: () -> Int","description":"staks.IntHandler.value","location":"staks/staks/-int-handler/value.html","searchKeys":["value","open override val value: () -> Int","staks.IntHandler.value"]},{"name":"open override val value: () -> List<T>","description":"staks.ListHandler.value","location":"staks/staks/-list-handler/value.html","searchKeys":["value","open override val value: () -> List<T>","staks.ListHandler.value"]},{"name":"open override val value: () -> List<T>","description":"staks.UnnamedListHandler.value","location":"staks/staks/-unnamed-list-handler/value.html","searchKeys":["value","open override val value: () -> List<T>","staks.UnnamedListHandler.value"]},{"name":"open override val value: () -> String","description":"staks.AttrHandler.value","location":"staks/staks/-attr-handler/value.html","searchKeys":["value","open override val value: () -> String","staks.AttrHandler.value"]},{"name":"open override val value: () -> String","description":"staks.TagTextHandler.value","location":"staks/staks/-tag-text-handler/value.html","searchKeys":["value","open override val value: () -> String","staks.TagTextHandler.value"]},{"name":"open override val value: () -> T","description":"staks.SingleHandler.value","location":"staks/staks/-single-handler/value.html","searchKeys":["value","open override val value: () -> T","staks.SingleHandler.value"]},{"name":"open override val value: () -> T","description":"staks.StaxBuilder.value","location":"staks/staks/-stax-builder/value.html","searchKeys":["value","open override val value: () -> T","staks.StaxBuilder.value"]},{"name":"open override val value: () -> Z?","description":"staks.OptionalHandler.value","location":"staks/staks/-optional-handler/value.html","searchKeys":["value","open override val value: () -> Z?","staks.OptionalHandler.value"]},{"name":"val children: HashSet<Handler<*>>","description":"staks.CompoundHandler.children","location":"staks/staks/-compound-handler/children.html","searchKeys":["children","val children: HashSet<Handler<*>>","staks.CompoundHandler.children"]}]
